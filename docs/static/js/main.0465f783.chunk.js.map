{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["URL","API_KEY","getBackgroundImage","conditionText","App","query","setQuery","useState","weather","setWeather","recentCities","setRecentCities","isOffline","setIsOffline","navigator","onLine","isCityWrong","setIsCityWrong","bgImage","setBgImage","updateOnlineStatus","useEffect","window","addEventListener","savedCities","JSON","parse","localStorage","getItem","removeEventListener","getWeatherForCity","async","data","axios","get","params","q","key","error","cache","caches","open","requestUrl","concat","cachedResponse","match","ok","requests","keys","filter","url","includes","length","lastRequest","json","Error","fetchWeather","city","prevCities","updatedCities","c","pop","setItem","stringify","updateRecentCities","location","name","current","condition","text","console","React","createElement","className","src","alt","onSubmit","e","preventDefault","action","autoComplete","type","placeholder","value","onChange","onQueryUpdate","target","country","Math","round","temp_c","icon","map","onClick","handleRecentCityClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0465f783.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.weatherapi.com/v1/current.json?aqi=no';\nconst API_KEY = '69f028e3aab242eaa67170122231510';\n\nexport const fetchWeather = async (query) => {\n    try {\n        const { data } = await axios.get(URL, {\n            params: {\n                q: query,\n                key: API_KEY,\n            }\n        });\n        return data;\n    } catch (error) {\n        if (!navigator.onLine) {\n            const cache = await caches.open('data-cache-v1');\n            const requestUrl = `${URL}?q=${query}&key=${API_KEY}`;\n            let cachedResponse = await cache.match(requestUrl);\n\n            if (!cachedResponse || !cachedResponse.ok) {\n                // If the specific request is not found, get the last cached response.\n                const keys = await cache.keys();\n                const requests = keys.filter(key => key.url.includes('weatherapi.com'));\n\n                if (requests.length > 0) {\n                    const lastRequest = requests[requests.length - 1]; // Get the last request\n                    cachedResponse = await cache.match(lastRequest);\n                }\n            }\n\n            if (cachedResponse && cachedResponse.ok) {\n                return await cachedResponse.json();\n            }\n            throw new Error('Offline and no cached data available');\n        } else {\n            throw error;\n        }\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchWeather } from './api/fetchWeather';\nimport 'reset-css/reset.css';\nimport './App.css';\nconst LAST_CITIES_LENGTH = 5;\n\nconst getBackgroundImage = (conditionText) => {\n    switch (conditionText) {\n        case 'Sunny':\n            return '/images/weather/sunny.png';\n        case 'Cloudy':\n            return '/images/weather/cloudy.png';\n        case 'Partly cloudy':\n            return '/images/weather/partly_cloudy.png';\n        case 'Mist':\n            return '/images/weather/mist.png';\n        // Add more cases for different weather conditions\n        default:\n            return '/images/weather/sunny.png'; // Default image\n    }\n}\n\nconst App = () => {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const [recentCities, setRecentCities] = useState([]);\n    const [isOffline, setIsOffline] = useState(!navigator.onLine);\n    const [isCityWrong, setIsCityWrong] = useState(false);\n    const [bgImage, setBgImage] = useState(getBackgroundImage());\n\n    const updateOnlineStatus = () => {\n        setIsOffline(!navigator.onLine);\n    }\n\n    useEffect(() => {\n        window.addEventListener('online',  updateOnlineStatus);\n        window.addEventListener('offline', updateOnlineStatus);\n\n        const savedCities = JSON.parse(localStorage.getItem('recentCities')) || [];\n        setRecentCities(savedCities);\n\n        return () => {\n            window.removeEventListener('online', updateOnlineStatus);\n            window.removeEventListener('offline', updateOnlineStatus);\n        };\n    }, []);\n\n    const updateRecentCities = (city) => {\n        setRecentCities(prevCities => {\n            const updatedCities = [city, ...prevCities.filter(c => c !== city)];\n            if (updatedCities.length > LAST_CITIES_LENGTH) {\n                updatedCities.pop();\n            }\n            localStorage.setItem('recentCities', JSON.stringify(updatedCities));\n            return updatedCities;\n        });\n    }\n\n    const getWeatherForCity = async (city) => {\n        setIsCityWrong(false);\n        try {\n            const data = await fetchWeather(city);\n            setWeather(data);\n            updateRecentCities(data.location.name);\n            setQuery(data.location.name);\n            setBgImage(getBackgroundImage(data.current.condition.text));\n\n        } catch (error) {\n            setIsCityWrong(true);\n            console.error(\"Failed to fetch weather\", error);\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await getWeatherForCity(query);\n    }\n\n    const handleRecentCityClick = async (city) => {\n        setQuery(city);\n        await getWeatherForCity(city);\n    }\n\n    const onQueryUpdate = (query) => {\n        setQuery(query);\n        setIsCityWrong(false);\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <img className=\"bg-image\" src={bgImage} alt=\"weather image\" />\n            <div className=\"main-container\">\n                <div className=\"form-wrapper\">\n\n                <form className=\"form\" onSubmit={handleSubmit} action=\"\" autoComplete=\"on\">\n                    <input\n                        autoComplete=\"on\"\n                        type=\"text\"\n                        name=\"city\"\n                        className={`search-input ${isCityWrong ? 'input-error' : ''}`}\n                        placeholder=\"Type city name...\"\n                        value={query}\n                        onChange={(e) => onQueryUpdate(e.target.value)}\n                    />\n                    <button type=\"submit\">go</button>\n                </form>\n                {isCityWrong && <p className=\"form-error\">Wrong city name</p>}\n            </div>\n\n                {isOffline && <div className=\"offline-message\">You're currently offline, showing last cached results.</div>}\n\n                {weather.location && (\n                    <article className=\"weather-result\">\n                        <header className=\"weather-location\">\n                            <h2 className=\"weather-location-city\">{weather.location.name}</h2>\n                            <p className=\"weather-location-country\">{weather.location.country}</p>\n                        </header>\n                        <section className=\"weather-temp\">\n                            <h3>temp: <strong>{Math.round(weather.current.temp_c)}<sup>&deg;C</sup></strong></h3>\n                            <h3>feels like: <strong>{Math.round(weather.current.temp_c)}<sup>&deg;C</sup></strong></h3>\n                        </section>\n                        <section className=\"weather-info\">\n                            <figure>\n                                <img className=\"weather-icon\" src={weather.current.condition.icon} alt=\"Weather icon\"/>\n                                <figcaption>{weather.current.condition.text}</figcaption>\n                            </figure>\n                        </section>\n                    </article>\n\n                )}\n\n                {(recentCities.length > 0) && (\n                    <div className=\"recent-cities\">\n                        <ul>\n                            {recentCities.map(city => {\n                                if (city !== query) { // Only render if it's not the currently selected city\n                                    return (\n                                        <li onClick={() => handleRecentCityClick(city)} key={city}>\n                                            {city}\n                                        </li>\n                                    );\n                                }\n                                return null; // Do not render the selected city\n                            })}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}