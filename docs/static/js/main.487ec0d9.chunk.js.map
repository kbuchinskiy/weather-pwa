{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["URL","API_KEY","fetchWeather","query","a","axios","get","params","q","key","data","navigator","onLine","caches","open","cache","requestUrl","match","cachedResponse","ok","keys","requests","filter","url","includes","length","lastRequest","json","Error","App","useState","setQuery","weather","setWeather","isOffline","setIsOffline","updateOnlineStatus","useEffect","window","addEventListener","removeEventListener","search","e","console","error","className","type","placeholder","value","onChange","target","onKeyDown","location","name","country","Math","round","current","temp_c","src","condition","icon","alt","text","ReactDOM","render","document","getElementById"],"mappings":"uQAEMA,EAAM,mDACNC,EAAU,kCAEHC,EAAY,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,+EAEGC,IAAMC,IAAIN,EAAK,CAClCO,OAAQ,CACJC,EAAGL,EACHM,IAAKR,KALO,uBAEZS,EAFY,EAEZA,KAFY,kBAQbA,GARa,mCAUfC,UAAUC,OAVK,kCAWIC,OAAOC,KAAK,iBAXhB,eAWVC,EAXU,OAYVC,EAZU,UAYMhB,EAZN,cAYeG,EAZf,gBAY4BF,GAZ5B,UAaWc,EAAME,MAAMD,GAbvB,YAaZE,EAbY,SAeQA,EAAeC,GAfvB,kCAiBOJ,EAAMK,OAjBb,WAiBNA,EAjBM,UAkBNC,EAAWD,EAAKE,QAAO,SAAAb,GAAG,OAAIA,EAAIc,IAAIC,SAAS,sBAExCC,OAAS,GApBV,wBAqBFC,EAAcL,EAASA,EAASI,OAAS,GArBvC,UAsBeV,EAAME,MAAMS,GAtB3B,QAsBRR,EAtBQ,mBA0BZA,IAAkBA,EAAeC,GA1BrB,kCA2BCD,EAAeS,OA3BhB,uDA6BV,IAAIC,MAAM,wCA7BA,4EAAH,sDC+DVC,G,MAhEH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACP3B,EADO,KACA4B,EADA,OAEgBD,mBAAS,IAFzB,mBAEPE,EAFO,KAEEC,EAFF,OAGoBH,oBAAUnB,UAAUC,QAHxC,mBAGPsB,EAHO,KAGIC,EAHJ,KAKRC,EAAqB,WACvBD,GAAcxB,UAAUC,SAG5ByB,qBAAU,WAIN,OAHAC,OAAOC,iBAAiB,SAAWH,GACnCE,OAAOC,iBAAiB,UAAWH,GAE5B,WACHE,OAAOE,oBAAoB,SAAUJ,GACrCE,OAAOE,oBAAoB,UAAWJ,MAE3C,IAEH,IAAMK,EAAM,uCAAG,WAAOC,GAAP,eAAAtC,EAAA,yDACE,UAAVsC,EAAEjC,IADM,0CAGgBP,EAAaC,GAH7B,OAGGO,EAHH,OAIHuB,EAAWvB,GACXqB,EAAS,IALN,gDAOHY,QAAQC,MAAM,0BAAd,MAPG,yDAAH,sDAYZ,OACI,yBAAKC,UAAU,kBACX,2BACIC,KAAK,OACLD,UAAU,eACVE,YAAY,oBACZC,MAAO7C,EACP8C,SAAU,SAACP,GAAD,OAAOX,EAASW,EAAEQ,OAAOF,QACnCG,UAAWV,IAGdP,GAAa,yBAAKW,UAAU,mBAAf,0DAEbb,EAAQoB,UACL,yBAAKP,UAAU,UACX,wBAAIA,UAAU,mBACV,8BAAOb,EAAQoB,SAASC,MACxB,6BAAMrB,EAAQoB,SAASE,UAE3B,yBAAKT,UAAU,eACVU,KAAKC,MAAMxB,EAAQyB,QAAQC,QAC5B,uCAEJ,yBAAKb,UAAU,eACX,yBAAKA,UAAU,mBAAmBc,IAAK3B,EAAQyB,QAAQG,UAAUC,KAAMC,IAAI,iBAC3E,2BAAI9B,EAAQyB,QAAQG,UAAUG,WCvDtDC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.487ec0d9.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.weatherapi.com/v1/current.json?aqi=no';\nconst API_KEY = '69f028e3aab242eaa67170122231510';\n\nexport const fetchWeather = async (query) => {\n    try {\n        const { data } = await axios.get(URL, {\n            params: {\n                q: query,\n                key: API_KEY,\n            }\n        });\n        return data;\n    } catch (error) {\n        if (!navigator.onLine) {\n            const cache = await caches.open('data-cache-v1');\n            const requestUrl = `${URL}?q=${query}&key=${API_KEY}`;\n            let cachedResponse = await cache.match(requestUrl);\n\n            if (!cachedResponse || !cachedResponse.ok) {\n                // If the specific request is not found, get the last cached response.\n                const keys = await cache.keys();\n                const requests = keys.filter(key => key.url.includes('weatherapi.com'));\n\n                if (requests.length > 0) {\n                    const lastRequest = requests[requests.length - 1]; // Get the last request\n                    cachedResponse = await cache.match(lastRequest);\n                }\n            }\n\n            if (cachedResponse && cachedResponse.ok) {\n                return await cachedResponse.json();\n            }\n            throw new Error('Offline and no cached data available');\n        } else {\n            throw error;\n        }\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchWeather } from './api/fetchWeather';\nimport './App.css';\n\nconst App = () => {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n    const updateOnlineStatus = () => {\n        setIsOffline(!navigator.onLine);\n    }\n\n    useEffect(() => {\n        window.addEventListener('online',  updateOnlineStatus);\n        window.addEventListener('offline', updateOnlineStatus);\n\n        return () => {\n            window.removeEventListener('online', updateOnlineStatus);\n            window.removeEventListener('offline', updateOnlineStatus);\n        };\n    }, []);\n\n    const search = async (e) => {\n        if(e.key === 'Enter') {\n            try {\n                const data = await fetchWeather(query);\n                setWeather(data);\n                setQuery('');\n            } catch (error) {\n                console.error(\"Failed to fetch weather\", error);\n            }\n        }\n    }\n\n    return (\n        <div className=\"main-container\">\n            <input\n                type=\"text\"\n                className=\"search-input\"\n                placeholder=\"Type city name...\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                onKeyDown={search}\n            />\n\n            {isOffline && <div className=\"offline-message\">You're currently offline, showing last cached results.</div>}\n\n            {weather.location && (\n                <div className=\"result\">\n                    <h2 className=\"result-location\">\n                        <span>{weather.location.name}</span>\n                        <sup>{weather.location.country}</sup>\n                    </h2>\n                    <div className=\"result-temp\">\n                        {Math.round(weather.current.temp_c)}\n                        <sup>&deg;C</sup>\n                    </div>\n                    <div className=\"result-info\">\n                        <img className=\"result-city-icon\" src={weather.current.condition.icon} alt=\"weather icon\"/>\n                        <p>{weather.current.condition.text}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}